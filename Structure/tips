Tree
    - root node
    - leaf node
    - size : 트리에 포함된 모든 노드의 개수
    - depth : 루트 노드부터의 거리
    - h : depth 중 max
    - degree : 각 노드의 자식 방향 edge 개수
    - edge = node - 1

Binary Indexed Tree
    - 2진법 인덱스 구조를 활용
      구간 합 문제를 효과적으로 해결
    - fenwick tree
    - 0이 아닌 마지막 비트를 찾는 방법
        - num & num
    - 트리 구조 만들기
      : 0이 아닌 마지막 비트 = 내가 저장하고 있는 값들의 개수
        ex) 16 -> '1 ~ 16 까지 모든 데이터에 대한 값들의 합을 담겠다'
            k = 16
            for i in range(k + 1):
                print(i, '의 마지막 비트:', (i & -i))