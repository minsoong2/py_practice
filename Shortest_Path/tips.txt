Shortest Path
    - 가장 짧은 경로를 찾는 알고리즘
    - 문제 상황
        1. 한 지점에서 다른 한 지점까지의 최단 경로
        2. 한 지점에서 다른 모든 지점까지의 최단 경로
        3. 모든 지점에서 다른 모든 지점까지의 최단 경로
    - Dijkstra
        - greedy로 분류
        - 완전한 최단 경로를 알기 위해서는 별도의 로직 구현
        - O(v^2) -> node 5000개 이하
            - python 1초에 20,000,000 연산 가정
    - Dijkstar made by Priority Queue
        - Heap
            - Priority Queue 구현하기 위해 사용하는 자료구조
            - Min, Max Heap
        - Priority Queue
            -    list  vs  Heap
            삽입  O(1)      O(logN)
            삭제  O(N)      O(logN)
        - O(ElogV)
    - Floyd-Warshall
        - 모든 노드에서 다른 모든 노드까지의 최단 경로 계산
        - 거쳐가는 노드를 기준으로 알고리즘 수행
            - but 매 단계마다 방문하지 않은 노드 중에 최단 거리를 찾는 과정 필요 x
        - 2d table 에 최단 거리 저장
        - dp
        - 노드의 개수가 적을 때 효과적 O(N^3) -> 500개 이하
        - D_ab = min(D_ab, D_ak + D_kb)
    - Bellman-Ford
        - 음수 edge 포함
        if 음수 간선 순환
           음의 무한
        - 경우 (모두 사용 가능)
            - 모든 간선이 양수
            - 음수 간선이 있는 경우
                - 음수 간선 순환 x
                - 음수 간선 순환 o (감지 o)
        - O(V*E) Dijkstra 보다 느림
        과정
        1. start node
        2. 최단 거리 테이블 초기화
        3. 다음 과정 N-1 반복
            3-1. 전체 간선 E개를 하나씩 확인
            3-2. 각 간선을 거쳐 다른 노드로 가는 비용을 계산
            3-3. 최단 거리 테이블 갱신
        if 음수 간선 탐지 하려면
            3번 과정 한번 더 수행
            결과 1. 최단 거리 테이블 갱신 o -> 음수 간선 순환 o
            결과 2. 최단 거리 테이블 갱신 x -> 음수 간선 순환 x